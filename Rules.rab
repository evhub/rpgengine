# Includes:
include(Unicode, Meta, Rand)
d := die

# Base Options:
base_roll := d20
rest_health = level
death_health = prop<<-con_score>>
(name := "Guest") @! var("name")

# Attribute Options:
ability_modifier(x) = floor:((x-10)/2)

# Strength should be str, old str will be set to string
string := str
def:: str = prop<<ability_modifier:str_score>>

dex = prop<<ability_modifier:dex_score>>
con = prop<<ability_modifier:con_score>>

# Intelligence should be int, old int will be set to integer
integer := int
def:: int = prop<<ability_modifier:int_score>>

wis = prop<<ability_modifier:wis_score>>
cha = prop<<ability_modifier:cha_score>>

# Abbreviations:
init = prop<<initiative>>
strength = prop<<str>>
dexterity = prop<<dex>>
constitution = prop<<con>>
intelligence = prop<<int>>
wisdom = prop<<wis>>
charisma = prop<<cha>>
health = prop<<hp>>
maxhealth = prop<<maxhp>>
fort = prop<<fortitude>>
refl = prop<<reflex>>

# Class Defaults:
(monk := 0) @! var("monk")
(autochemist := 0) @! var("autochemist")
(roboticist := 0) @! var("roboticist")
(hybrid := 0) @! var("hybrid")
(elementalist := 0) @! var("elementalist")
(chemist := 0) @! var("chemist")

# Power Attack Extras:
power_attack_penalty = -(1+floor(bab/4))
power_attack = prop<<attack+power_attack_penalty>>
power_damage_base = 2+2*floor(bab/4)
power_damage_P = prop<<damage+power_damage_base>>
power_damage_S = prop<<damage+power_damage_base/2>>
power_damage_B = prop<<damage+floor(power_damage_base*1.5)>>

# Monk Extras:
flurry_bonus(x) = monk-2@x<=1; monk-7@x<=3; monk-12@x<=5; monk-17
flurry_normal() = attack-bab
flurry_get(flurry_normal) = flurry_normal@len(bab)<=1; flurry_normal:0
flurry_number(monk) = 0@monk?=0; 2@monk<=5; 3@monk<=7; 4@monk<=10; 5@monk?=11; 6@monk<=14; 7@monk?=15; 8@monk?=16; 9
flurry(x) = range(0,flurry_number(monk)) ~ \x\(flurry_get(flurry_normal())+flurry_bonus(x))

# New Materia Extras:
nanopoints = prop<<nanopoints_autochemist + nanopoints_roboticist + nanopoints_hybrid>>
nanopoints_autochemist = 0@autochemist<1; 1+floor:(autochemist/3)
nanopoints_roboticist = 0@roboticist<13; prop<<int>>
nanopoints_hybrid = 0@hybrid<3; floor:(hybrid/3)

# Autochemist Extras:
autochemistry_range = 20+autochemist
autochemistry_size = 5+autochemist
autochemistry_attack = prop<<autochemist+dex>>
autochemistry_dice = prop<<4d6@autochemist>=18; 3d6@autochemist>=12; 2d6@autochemist>=8; 1d6@autochemist>=1>>
autochemistry_damage = prop<<autochemistry_dice+int>>
autochemistry_dc = prop<<10+floor:(autochemist/2)+int>>
autochemistry_medicinal_dice = prop<<4d4@autochemist>=15; 3d4@autochemist>=12; 2d4@autochemist>=7; 1d4@autochemist>=3>>
autochemistry_medicinal = prop<<autochemistry_medicinal_dice+int>>
autochemistry_organic_dice = prop<<4d12@autochemist>=18; 3d12@autochemist>=15; 2d12@autochemist>=10; 1d12@autochemist>=5>>
autochemistry_organic = prop<<autochemistry_organic_dice+int>>

# Elementalist Extras:
hands = 2

bending_diameter = prop<<(hands*elementalist*9)^0.5>>
bending_speed = prop<<wis_score+2*elementalist>>
bending_weight = prop<<10*(wis_score+elementalist)>>
bending_range = 15+2*elementalist
bending_attack_range = prop<<bending_range+100/bending_diameter>>
bending_attack = prop<<floor:(bending_diameter+wis)>>
bending_damage = prop<<(bending_diameter^2)/3>>

atomic_rend_range = 5*floor:(elementalist/4)
atomic_rend_damage = prop<<elementalist+wis>>
atomic_rend_attack = 0

# Chemist Extras:
pints = 0
potency = 0

minutia(pints) = floor:(5-pints)@pints<5; 0
wmd(pints) = 11@11/pints>11; 1@11/pints<1; floor:(11/pints)

chemicals_damage = prop<<(floor:pints)d(potency*2)+(pints-floor:pints)*potency>>
chemicals_splash = prop<<chemicals_damage/1.5>>
chemicals_radius = prop<<(potency+pints)*1.5>>
chemicals_dc = prop<<10+potency+pints/2>>
chemicals_range = prop<<25-1/4*pints>>
